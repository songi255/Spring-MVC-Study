webapp : HTML, CSS, JS, JSP 등의 webapp 이 위치한다.
WEB-INF : web.xml 이 위치한다.

Servlet 스펙에 따르면 WEB-INF 하위 폴더로 lib, classes 폴더 생성 후 필요한 jar, 컴파일 된 class 파일들이 위치해야 한다.
하지만 maven, gradle 등을 사용하면 의존설정과 빌드를 따로 해주기 때문에 필요없다.

Spring 프로젝트는 생성 후 Tomcat, Jetty 등 서버를 설정 해 주어야 한다.
    - IntelliJ 에서의 설정은 나중에 알아보자 (어차피 Boot 쓸거다...)

Spring MVC 동작과정
    - Dispatcher Servlet 이 중심이다.
    1. 브라우저의 요청이 Dispatcher 에 전달
    2. Dispatcher에서 다음을 수행
        1. HandlerMapping (bean) 을 이용하여 mapping 되는 Controller 검색
            - Controller Mapping 이 아닌, Handler Mapping 인 이유는 뭘까?
                - 자신이 직접 만든 Class 를 이용해서 요청처리할 수도 있기 때문이다.
                - 실제로 HttpRequestHandler 같은것도 존재한다.
                - 그래서 Handler 라고 표현한다.

        2. HandlerAdapter (bean) 에 Controller 실행처리위임
            - 다양한 Controller 를 모두 동일한 방식으로 실행할 수 있도록 만든 Adapter.
                - @Controller
                - 2.5까지 주로 사용되면 Controller interface 구현체
                - 특수목적으로 사용되는 HttpRequestHandler interface 구현체
            - Dispatcher 는 실행결과만 ModelAndView 로 받을 수 있으면 Handler 가 무슨 타입이든 상관없다.
                - 그러나, Handler 에 따라 그럴수도, 아닐수도 있다.
                - 그래서 중간에서 결과값을 ModelAndView 로 변환해주는 역할을 Adapter 가 한다.
            - Controller (bean) 을 실행 후 결과받음
            - return 받은 결과를 ModelAndView 로 변환해서 Dispatcher 에게 return

        Handler 타입마다 matching 되는 HandlerMapping, HandlerAdapter 가 존재한다. 그래서 원래는 전부 Spring Bean 으로 등록되어야 한다.
            - 물론 Spring 설정기능덕분에 직접 하지 않아도 된다.
                - 바로, Config 클래스에 붙는 @EnableWebMvc 이다!
                    - RequestMappingHandlerMapping
                    - RequestMappingHandlerAdapter
                    위 두 Class 를 Bean 으로 등록해서, @Controller 마다 두 bean 의 등록을 자동화해준다.

        3. ViewResolver (bean) 에 View 검색요청
            - 매번 새로운 View 객체 생성해서 return

        4. 매칭된 View 객체에 응답 생성요청

        5. View 는 template engine 를 사용해서 응답 생성

        위에서 사용된 객체들 (HandlerMapping, HandlerAdapter, Controller, ViewResolver 등등..) 은 Dispatcher 가 찾아야 한다.
            - Dispatcher 는 설정파일을 이용해서 Spring Container 를 생성한다.
            - 이 Container 에서 위의 Bean 들을 구한다.
            - 즉, 진짜로 Dispatcher 가 중심 그 자체다..

        물론 실제 동작방식은 훨씬 더 복잡하지만, 이 과정 정도만 알고 있어도 개발을 어렵지 않게 해나갈 수 있다.